{"version":3,"sources":["img/register.svg","db.js","context.js","components/Sidebar/NoteListItem.js","components/Sidebar/NotesList.js","components/Sidebar/SearchField.js","components/Sidebar/Sidebar.js","components/NotesWorkSpace/Workspace.js","components/NotesWorkSpace/WorkspaceContainer.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","db","Dixie","version","stores","notes","NotesContext","createContext","NotesProvider","props","useState","state","setState","isNoteOpen","setIsNoteOpen","id","title","text","openNote","setOpenNote","useEffect","a","toArray","getPosts","Provider","value","handleOpenNote","date","OpenNoteChanger","prop","prevState","handleNotes","action","note","Date","add","then","delete","update","children","NotesListItem","search","context","useContext","toLowerCase","includes","CardWrapper","onClick","className","moment","toString","calendar","styled","div","NotesList","length","NoItemsWrapper","map","key","SearchField","handleChange","placeholder","onChange","style","width","Sidebar","setSearch","e","target","NoteListWrapper","Workspace","changeHandler","handleClick","WorkspaceWrapper","Input","type","autoComplete","Button","Textarea","input","textarea","button","WorkspaceContainer","setTitle","setText","setDate","Navbar","NavbarWrapper","src","icon","alt","nav","App","AppWrapper","Container","Row","Col","xs","lg","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.adb33c0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/register.bf7ecd46.svg\";","import Dixie from \"dexie\";\r\n\r\nconst db = new Dixie(\"notes\");\r\ndb.version(1).stores({ notes: \"++id, title, text, date\" });\r\n\r\nexport default db;","import React, { createContext, useState, useEffect } from \"react\";\r\nimport db from \"./db\";\r\n\r\nconst NotesContext = createContext();\r\n\r\nconst NotesProvider = (props) => {\r\n  const [state, setState] = useState([]);\r\n  const [isNoteOpen, setIsNoteOpen] = useState(false);\r\n  const [openNote, setOpenNote] = useState({\r\n    id: \"\",\r\n    title: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    const getPosts = async () => {\r\n      let notes = await db.notes.toArray();\r\n      setState(notes);\r\n    };\r\n    getPosts();\r\n  }, []);\r\n\r\n  const handleNotes = (title, text, action, id) => {\r\n    switch (action) {\r\n      case \"add\":\r\n        if (title !== \"\" && text !== \"\") {\r\n          const note = {\r\n            title,\r\n            text,\r\n            date: new Date(),\r\n          };\r\n          db.notes.add(note).then(async () => {\r\n            let notes = await db.notes.toArray();\r\n            setState(notes);\r\n          });\r\n          setIsNoteOpen(false);\r\n        }\r\n        break;\r\n      case \"delete\":\r\n        db.notes.delete(id).then(async () => {\r\n          let notes = await db.notes.toArray();\r\n          setState(notes);\r\n        });\r\n        setIsNoteOpen(false);\r\n        break;\r\n      case \"update\":\r\n        if (title !== \"\" && text !== \"\") {\r\n          db.notes\r\n            .update(id, { title, text, date: new Date() })\r\n            .then(async () => {\r\n              let notes = await db.notes.toArray();\r\n              setState(notes);\r\n            });\r\n          setIsNoteOpen(false);\r\n        }\r\n        break;\r\n      case \"clear\":\r\n        setIsNoteOpen(false);\r\n        break;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const handleOpenNote = (id, title, text, date) => {\r\n    setIsNoteOpen(true);\r\n    setOpenNote({\r\n      id,\r\n      title,\r\n      text,\r\n      date,\r\n    });\r\n  };\r\n\r\n  const OpenNoteChanger = (prop, value) => {\r\n    setOpenNote((prevState) => ({\r\n      ...prevState,\r\n      [prop]: value,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <NotesContext.Provider\r\n      value={{\r\n        state,\r\n        handleOpenNote,\r\n        isNoteOpen,\r\n        openNote,\r\n        OpenNoteChanger,\r\n        handleNotes\r\n      }}\r\n    >\r\n      {props.children}\r\n    </NotesContext.Provider>\r\n  );\r\n};\r\n\r\nexport { NotesContext, NotesProvider };\r\n\r\n// import React, { createContext, useState, useEffect } from \"react\";\r\n// import db from \"./db\";\r\n\r\n// const NotesContext = createContext();\r\n\r\n// const NotesProvider = (props) => {\r\n//   const [state, setState] = useState([]);\r\n//   const [isNoteOpen, setIsNoteOpen] = useState(false);\r\n//   const [openNote, setOpenNote] = useState({\r\n//     id: \"\",\r\n//     title: \"\",\r\n//     text: \"\",\r\n//   });\r\n\r\n//   useEffect(() => {\r\n//     const getPosts = async () => {\r\n//       let notes = await db.notes.toArray();\r\n//       setState(notes);\r\n//     };\r\n//     getPosts();\r\n//   }, []);\r\n\r\n//   const handleAddNewNote = (title, text) => {\r\n//     if (title !== \"\" && text !== \"\") {\r\n//       const note = {\r\n//         title,\r\n//         text,\r\n//         date: new Date(),\r\n//       };\r\n//       db.notes.add(note).then(async () => {\r\n//         let notes = await db.notes.toArray();\r\n//         setState(notes);\r\n//       });\r\n//     }\r\n//     setIsNoteOpen(false);\r\n//   };\r\n\r\n//   const handleDeleteNote = (id) => {\r\n//     db.notes.delete(id).then(async () => {\r\n//       let notes = await db.notes.toArray();\r\n//       setState(notes);\r\n//     });\r\n//     setIsNoteOpen(false);\r\n//   };\r\n\r\n//   const handleUpdateNote = (id, title, text) => {\r\n//     if (title !== \"\" && text !== \"\") {\r\n//       db.notes.update(id, { title, text, date: new Date() }).then(async () => {\r\n//         let notes = await db.notes.toArray();\r\n//         setState(notes);\r\n//       });\r\n//       setIsNoteOpen(false);\r\n//     }\r\n//   };\r\n\r\n//   const handleClearField = () => {\r\n//     setIsNoteOpen(false);\r\n//   };\r\n\r\n//   const handleOpenNote = (id, title, text, date) => {\r\n//     setIsNoteOpen(true);\r\n//     setOpenNote({\r\n//       id,\r\n//       title,\r\n//       text,\r\n//       date,\r\n//     });\r\n//   };\r\n\r\n//   const OpenNoteChanger = (prop, value) => {\r\n//     setOpenNote((prevState) => ({\r\n//       ...prevState,\r\n//       [prop]: value,\r\n//     }));\r\n//   };\r\n\r\n//   return (\r\n//     <NotesContext.Provider\r\n//       value={{\r\n//         state,\r\n//         handleAddNewNote,\r\n//         handleOpenNote,\r\n//         handleDeleteNote,\r\n//         handleUpdateNote,\r\n//         isNoteOpen,\r\n//         openNote,\r\n//         OpenNoteChanger,\r\n//         handleClearField,\r\n//       }}\r\n//     >\r\n//       {props.children}\r\n//     </NotesContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export { NotesContext, NotesProvider };\r\n","import React, { useContext } from \"react\";\r\nimport * as moment from \"moment\";\r\nimport { NotesContext } from \"../../context\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NotesListItem = ({ search, note }) => {\r\n  const { id, title, text, date } = note;\r\n  const context = useContext(NotesContext);\r\n  if (\r\n    search !== \"\" &&\r\n    !text.toLowerCase().includes(search.toLowerCase()) &&\r\n    !title.toLowerCase().includes(search.toLowerCase())\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const handleClick = () => {\r\n    context.handleOpenNote(id, title, text, date);\r\n  };\r\n\r\n  return (\r\n    <CardWrapper onClick={handleClick}>\r\n      <div className=\"card-body\">\r\n        <h5 className=\"card-title\">{title}</h5>\r\n        <hr className='card-separator'/>\r\n        <p className=\"card-text\">{text}</p>\r\n        <p className=\"card-date\">{moment(date.toString()).calendar()}</p>\r\n      </div>\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nexport default NotesListItem;\r\n\r\nconst CardWrapper = styled.div`\r\n  background: var(--cardsColor);\r\n  color: white !important;\r\n  margin-top: 10px;\r\n  border-radius: 10px;\r\n  .card-title {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n    font-size: 20px;\r\n  }\r\n  .card-separator {\r\n    background-color: white;\r\n  }\r\n  .card-text {\r\n    overflow: hidden;\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 3;\r\n    -webkit-box-orient: vertical;\r\n  }\r\n  .card-date {\r\n    float: right;\r\n    font-size: 12px;\r\n  }\r\n  &:hover {\r\n    box-shadow: 4px 4px 4px 4px rgba(0.2, 0.2, 0.2, 0.2);\r\n    transition: All 0.2s ease-in-out;\r\n    cursor: pointer;\r\n  }\r\n  &:active {\r\n    border: 4px solid #40B3A2;\r\n  }\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport { NotesContext } from \"../../context\";\r\nimport NotesListItem from \"./NoteListItem\";\r\nimport styled from \"styled-components\";\r\n\r\nconst NotesList = ({ search }) => {\r\n  const context = useContext(NotesContext);\r\n\r\n  if (context.state.length === 0) {\r\n    return <NoItemsWrapper className=\"no-items-div\"> there's no items yet...</NoItemsWrapper>;\r\n  }\r\n\r\n  return context.state.map((note) => (\r\n    <NotesListItem key={note.id} search={search} note={note} />\r\n  ));\r\n};\r\n\r\nexport default NotesList;\r\n\r\nconst NoItemsWrapper = styled.div`\r\nmargin-top: 20px;\r\nfont-size: 24px;\r\ntext-align: center;\r\n  color: #14E8C8;\r\n`","import React from \"react\";\r\n\r\nconst SearchField = ({ handleChange }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        placeholder=\"lets find a note...\"\r\n        onChange={handleChange}\r\n        style={{ width: \"100%\" }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchField;\r\n","import React, { useState } from \"react\";\r\nimport NotesList from \"./NotesList\";\r\nimport SearchField from \"./SearchField\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Sidebar = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SearchField handleChange={handleChange} />\r\n      <NoteListWrapper>\r\n        <NotesList search={search} />\r\n      </NoteListWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n\r\nconst NoteListWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column-reverse;\r\n`;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport * as moment from \"moment\";\r\n\r\nconst Workspace = ({\r\n  changeHandler,\r\n  handleClick,\r\n  isNoteOpen,\r\n  title,\r\n  text,\r\n  date,\r\n}) => {\r\n  return (\r\n    <WorkspaceWrapper>\r\n      <h3>Title:</h3>\r\n      <Input\r\n        id=\"title\"\r\n        type=\"title\"\r\n        value={title}\r\n        onChange={changeHandler(\"title\")}\r\n        autoComplete=\"off\"\r\n        title={title}\r\n      />\r\n\r\n      {isNoteOpen && (\r\n        <>\r\n          <div>{moment(date.toString()).calendar()}</div>\r\n          <Button\r\n            onClick={handleClick(\"delete\")}\r\n            className=\"btn btn-danger btn-sm\"\r\n          >\r\n            DELETE\r\n          </Button>\r\n          <Button\r\n            onClick={handleClick(\"update\")}\r\n            className=\"btn btn-warning btn-sm\"\r\n          >\r\n            UPDATE\r\n          </Button>\r\n          <Button\r\n            onClick={handleClick(\"clear\")}\r\n            className=\"btn btn-secondary btn-sm\"\r\n          >\r\n            CLEAR INPUT\r\n          </Button>\r\n        </>\r\n      )}\r\n      <Button onClick={handleClick(\"add\")} className=\"btn btn-success btn-sm\">\r\n        ADD NEW\r\n      </Button>\r\n      <h3>Text:</h3>\r\n      <Textarea\r\n        id=\"text\"\r\n        type=\"text\"\r\n        value={text}\r\n        onChange={changeHandler(\"text\")}\r\n      />\r\n    </WorkspaceWrapper>\r\n  );\r\n};\r\n\r\nexport default Workspace;\r\n\r\nconst WorkspaceWrapper = styled.div`\r\n  h3 {\r\n    margin-top: 10px;\r\n    color: #14e8c8;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  outline: none;\r\n  background: var(--workSpaceColor);\r\n  color: white;\r\n  border: 2px solid #40b3a2;\r\n  font-size: 30px;\r\n`;\r\n\r\nconst Textarea = styled.textarea`\r\n  font-size: 20px;\r\n  width: 100%;\r\n  min-height: 500px;\r\n  resize: none;\r\n  outline: none;\r\n  background: var(--workSpaceColor);\r\n\r\n  color: white;\r\n  border: 2px solid #40b3a2;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-top: 10px;\r\n  margin-right: 10px;\r\n`;\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { NotesContext } from \"../../context\";\r\nimport NotesWorkspace from \"./Workspace\";\r\n\r\nconst WorkspaceContainer = (props) => {\r\n  const context = useContext(NotesContext);\r\n  const {\r\n    isNoteOpen,\r\n    openNote,\r\n    OpenNoteChanger,\r\n    handleNotes\r\n  } = context;\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  const [text, setText] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  useEffect(() => {\r\n    if (isNoteOpen) {\r\n      setTitle(openNote.title);\r\n      setText(openNote.text);\r\n      setDate(openNote.date)\r\n    } else {\r\n      setTitle(\"\");\r\n      setText(\"\");\r\n      setDate(\"\")\r\n    }\r\n  }, [openNote.title, openNote.text, openNote.date, isNoteOpen]);\r\n\r\n  const changeHandler = (prop) => (e) => {\r\n    if (isNoteOpen) {\r\n      OpenNoteChanger(prop, e.target.value);\r\n    }\r\n    prop === \"title\" ? setTitle(e.target.value) : setText(e.target.value);\r\n  };\r\n\r\n  const handleClick = (action) => () => {\r\n    // switch (action) {\r\n    //   case \"add\":\r\n    //     handleAddNewNote(title, text);\r\n    //     break;\r\n    //   case \"delete\":\r\n    //     handleDeleteNote(openNote.id);\r\n    //     break;\r\n    //   case \"update\":\r\n    //     handleUpdateNote(openNote.id, title, text);\r\n    //     break;\r\n    //   case \"clear\":\r\n    //     handleClearField()\r\n    //     break;\r\n    //   default:\r\n    //     break;\r\n    // }\r\n    handleNotes(title, text, action, openNote.id)\r\n  };\r\n\r\n  return (\r\n    <NotesWorkspace\r\n      changeHandler={changeHandler}\r\n      handleClick={handleClick}\r\n      isNoteOpen={isNoteOpen}\r\n      title={title}\r\n      text={text}\r\n      date={date}\r\n    />\r\n  );\r\n};\r\n\r\nexport default WorkspaceContainer;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport icon from '../../img/register.svg'\r\n\r\nconst Navbar = () => {\r\n  return ( \r\n    <NavbarWrapper className=\"navbar navbar-light\">\r\n      <div className=\"title\">\r\n        <img src={icon} alt=\"icon\" />\r\n        NOTES\r\n        </div>\r\n      \r\n      \r\n\r\n    </NavbarWrapper>\r\n   );\r\n}\r\n \r\nexport default Navbar;\r\n\r\nconst NavbarWrapper = styled.nav`\r\n  background: var(--navbarColor);\r\n  margin-bottom: 20px;\r\n  color: white !important;\r\n  border-bottom-left-radius: 10px;\r\n  border-bottom-right-radius: 10px;\r\n  height: 60px !important;\r\n  img {\r\n    width: 40px;\r\n    height: 40px;\r\n    margin-right: 10px;\r\n  }\r\n\r\n  .title {\r\n    font-weight: bold !important;\r\n    font-size: 24px;\r\n    color:  white;\r\n  }\r\n`","import React from \"react\";\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport WorkspaceContainer from \"./components/NotesWorkSpace/WorkspaceContainer\";\nimport \"./App.css\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport styled from \"styled-components\";\n\nconst App = () => {\n  return (\n    <AppWrapper>\n      <Container className=\"container\">\n        <Navbar />\n        <Row>\n          <Col xs={3} lg=\"3\">\n            <Sidebar />\n          </Col>\n          <Col>\n            <WorkspaceContainer />\n          </Col>\n        </Row>\n      </Container>\n    </AppWrapper>\n  );\n};\n\nexport default App;\n\nconst Container = styled.div``;\nconst AppWrapper = styled.div`\n  background-color: var(--backgroundColor);\n  background-size: cover;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { NotesProvider } from \"./context\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <NotesProvider>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </NotesProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}